# context-free grammar

<file>        ::= <form>*
<form>        ::= <expression>

<expression>  ::= <constant> | <variable>
                  | ( <condition>* cond ) # multi true-only condition
                  | ( <expression>* {and | or | eq} )
                  | ( <expression> not )
                  | ( <expression> <expression> {lt | le | gt | ge} )
                  | ( <expression>* {add | sub | mul} )
                  | ( <expression> <expression> {div | mod} )
                  | ( <variable> <expression> set )
                  | ( <var_list> <body> lambda )
                  | ( <sequence> print )
                  | ( <operand>* <operator> ) # call function

<condition>   ::= ( <text> <sequence> )
<variable>    ::= <identifier>
<var_list>    ::= <variable> | ( <variable>* )
<body>        ::= <sequence>

<sequence>    ::= <expression>+
<identifier>  ::= <initial> | <sub_sequent>*
<operator>    ::= <expression>
<operand>     ::= <expression>*
<initial>     ::= <letter>
<sub_sequent> ::= <initial> | <digit>

<letter>      ::= A | ... | Z | a | ... | z
<digit>       ::= 0 | ... | 9
