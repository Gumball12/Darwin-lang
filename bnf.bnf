# context-free grammar

Expression
	= "(" (Data)* ")"

Data
  = (empty)* Expression (empty)*
  | (empty)* atoms (empty)*

atoms
  = (letter | number) (atom)*

atom
	= letter
  | number

letter
	= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
  | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
  | "u" | "v" | "w" | "x" | "y" | "z"
  | "\"" | "\'" | "~" | "," | "!"

number
	= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0"

empty
	= " " | \t | \n | \r

# type attribute grammar
# types: excepted_type, actual_type
# functions: look-up

Expression
  = "(" (Data)* ")"
  {Expression.excepted_type = Data.excepted_type}

Data
  = (empty)* Expression (empty)*
  {Data.actual_type = Expression.excepted_type}

Data
  = (empty)* atoms (empty)*
  {Data.actual_type = look-up(atoms.string)}

# value attribute grammar
# types: value
# functions: eval, look-up

Expression
  = "(" (Data)* ")"
  {Expression.value = eval(Data).value}

Data
  = (empty)* Expression (empty)*
  {Data.value = Expression.value}

Data
  = (empty)* atoms (empty)*
  {Data.value = look-up(atoms.string)}

# PEG

Expression
	= "(" (Data)* ")"

Data
	= (empty)* Expression (empty)*
    / (empty)* atoms (empty)*

atoms
	= (letter / number) (atom)*

atom
	= letter / number

letter
	= [a-zA-Z"'~,!]

number
	= [0-9]

empty
	= [ \t\n\r]
