# PEG

Expression
	= "(" (empty)* (Argument)* (empty)* Function (empty)* ")"

Argument
	= (atom)* empty
    / Expression

Function
	= letter (atom)*

atom
	= letter / number

letter
	= [a-z]

number
	= [0-9]

empty
	= [ \t\n\r]

# context-free grammar

Expression
	= "(" (empty)* (Argument)* (empty)* Function (empty)* ")"

Argument
  = (atom)* empty
  | Expression

Function
  = letter (atom)*

atom
	= letter
  | number
  | empty

letter
	= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
  | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
  | "u" | "v" | "w" | "x" | "y" | "z"

number
	= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0"

empty
	= " " | \t | \n | \r

# attribute grammar
# types: excepted_type, actual_type
# functions: look-up, eval

Expression
  = "(" (empty)* (Argument)* (empty)* Function (empty)* ")"
  {Expression.excepted_type = Function.actual_type}

Argument
  = (atom)* empty
  {Argument.actual_type = look-up((atom)*)}

Argument
  = Expression
  {Argument.actual_type = Expression.excepted_type}

Function
  = (atom)*
  {Function.actual_type = eval((atom)*).type}

# value grammar

Expression
  = "(" (empty)* (Argument)* (empty)* Function (empty)* ")"
  {Expression.value = eval(Function).value}

Argument
  = (atom)* empty
  {Argument.value = (atom)*}

Argument
  = Expression
  {Argument.value = Expression.value}

Function
  = (atom)*
  {Function.value = eval((atom)*).value}
